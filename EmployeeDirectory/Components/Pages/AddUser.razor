@page "/add-user"
@using Telerik.DataSource.Extensions;
@using Telerik.DataSource
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using EmployeeDirectory.Models.Data
@using EmployeeDirectory.Models
@using Telerik.Blazor.Components
@inject AppDbContext DbContext
@rendermode InteractiveServer
<TelerikRootComponent>
    @if (ValidSubmit)
    {
        <div class="success-alert">
            The form was submitted successfully.
        </div>
    }
    else
    {

        <TelerikForm Model="@newEmployee"
                OnValidSubmit="@handleValidSubmit"
                OnInvalidSubmit="@HandleInvalidSubmit">
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
                <FormItem Field="@nameof(newEmployee.FirstName)"></FormItem>
                <FormItem Field="@nameof(newEmployee.LastName)"></FormItem>
                <FormItem Field="@nameof(newEmployee.Email)"></FormItem>
                <FormItem Field="@nameof(newEmployee.PhoneNumber)"></FormItem>
                <FormItem Field="@nameof(newEmployee.DepartmentId)"></FormItem>
                <FormItem Field="@nameof(newEmployee.JobTitleId)"></FormItem>
                <FormItem Field="@nameof(newEmployee.HireDate)"></FormItem>
                <FormItem Field="@nameof(newEmployee.IsActive)"></FormItem>
            </FormItems>
        </TelerikForm>
    }
</TelerikRootComponent>
@code {
    public bool ValidSubmit { get; set; } = false;
    private Employee newEmployee = new Employee();
    private UserAccount newUserAccount = new UserAccount();
    private async Task handleValidSubmit()
    {
        try
        {
            var nextId = DbContext.Users.Any() ? DbContext.Users.Max(u => u.Id) + 1 : 1;

            ValidSubmit = true;
            DbContext.Employees.Add(newEmployee); 
            await DbContext.SaveChangesAsync();
            //create automatic username pw for user

            string username_pw = newEmployee.FirstName.ToLower() + newEmployee.LastName[0];
            newUserAccount.UserName = username_pw;
            newUserAccount.Password = username_pw;
            newUserAccount.EmployeeID = newEmployee.Id;
            newUserAccount.PermissionID = 1;
            DbContext.Users.Add(newUserAccount);
            await DbContext.SaveChangesAsync();

            ValidSubmit = false;

        }
        catch (Exception ex)
        {
            // Log the exception or handle it appropriately
            ValidSubmit = false;
            StateHasChanged();
            Console.WriteLine($"Error: {ex.Message}");
            // Consider showing an error message to the user
        }

    }
    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }
}
