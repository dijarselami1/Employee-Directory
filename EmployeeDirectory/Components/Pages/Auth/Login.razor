@page "/login"

@using System.Security.Claims
@using EmployeeDirectory.Models.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authentication.Cookies
@using EmployeeDirectory.Models
@using EmployeeDirectory.Services

@inject NavigationManager Navigation
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject SignInServices SignInService

<h3>Login</h3>

<div class="login-form">
    <EditForm Model="Model" OnValidSubmit="Authenticate" FormName="LoginForm">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>User Name</label>
            <InputText @bind-Value="Model.UserName" placeholder="User Name" />
            <ValidationMessage For="()=> Model.UserName" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <InputText @bind-Value="Model.Password" placeholder="Password" />
            <ValidationMessage For="()=> Model.Password" />
        </div>
        <div>
            <span>@errorMessage</span>
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>
</div>
@code {
    // tell teh system which value to tie to the form
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string errorMessage;

    //called on submit click
    public async Task Authenticate()
    {

        // checks if input is null or space
        if(string.IsNullOrWhiteSpace(Model.UserName) || 
            string.IsNullOrWhiteSpace(Model.Password))
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }

        // fetches data from database for the employee with matching name
        var userAccount = DbContext.Users.Where(X => X.UserName== Model.UserName).FirstOrDefault();

        //checks if information is valid
        if (userAccount == null || userAccount.Password!= Model.Password)
        {
            errorMessage = "Account doesn't exist or password missmatch";
            return;
        }

        await SignInService.UserSignInAsync(Model, userAccount);
    }   

}
