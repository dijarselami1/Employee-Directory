@page "/employees-page"
@using System.ComponentModel.DataAnnotations
@using Telerik.DataSource.Extensions;
@using Telerik.DataSource

@using Microsoft.AspNetCore.Authorization
@using EmployeeDirectory.Models.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject AppDbContext DbContext
@inject IAuthorizationService AuthorizationService
@inject NavigationManager navigation
@rendermode InteractiveServer



<h3>Employees</h3>

@if (employeeCurr == null)
{
    <p>Loading profile...</p>
}
else
{
<TelerikRootComponent>
    <TelerikButton OnClick="@( ()=>addUser())"
                Class="popup-target" >Add New User</TelerikButton>



    <TelerikGrid TItem="Employee"
                 OnRead="@readItems"
                 Height="400px"
                 EditMode="@GridEditMode.Popup"
                 OnEdit="@OnGridEdit"
                 OnUpdate="@OnGridUpdate"
                 Sortable="true"
                >
        <GridSettings>
            <GridPopupEditSettings Title="Popup Title" MaxHeight="95vh" MaxWidth="95vw"></GridPopupEditSettings>
            <GridPopupEditFormSettings ColumnSpacing="20px" Orientation="@FormOrientation.Horizontal" Columns="2">
                    <FormTemplate Context="employee">
                        @* cast once to local variable *@
                        @{
                            var emp = (Employee)employee.Item;
                        }

                        <TelerikForm Model="editEmployee">
                            <FormItems>
                                <FormItem Field="@nameof(Employee.FirstName)" LabelText="First Name" />
                                <FormItem Field="@nameof(Employee.LastName)" LabelText="Last Name" />
                                <FormItem Field="@nameof(Employee.Email)" LabelText="Email" />
                                <FormItem Field="@nameof(Employee.PhoneNumber)" LabelText="Phone Number" />

                                <FormItem Field="@nameof(Employee.DepartmentId)" LabelText="Department ID">
                                    <Template>
                                        <TelerikDropDownList Data="@departmentDropDown"
                                                             TItem="@Department"
                                                             TValue="int"
                                                             @bind-Value="(editEmployee.DepartmentId)"
                                                             TextField="@nameof(Department.Name)"
                                                             ValueField="@nameof(Department.Id)"
                                                             AdaptiveMode="@AdaptiveMode.Auto">
                                        </TelerikDropDownList>
                                    </Template>
                                </FormItem>

                                <FormItem Field="@nameof(Employee.JobTitleId)" LabelText="Job Title ID">
                                    <Template>
                                        <TelerikDropDownList Data="@jobTitles"
                                                             TItem="@JobTitle"
                                                             TValue="int"
                                                             @bind-Value="(editEmployee.JobTitleId)"
                                                             TextField="@nameof(JobTitle.Title)"
                                                             ValueField="@nameof(JobTitle.Id)"
                                                             AdaptiveMode="@AdaptiveMode.Auto">
                                        </TelerikDropDownList>
                                    </Template>
                                </FormItem>

                                <FormItem Field="@nameof(Employee.IsActive)" LabelText="Is Active" />
                                <FormItem Field="@nameof(Employee.HireDate)" LabelText="Hire Date" />

                                <FormItem Field="@nameof(Employee.ProfilePhoto)" LabelText="Photo">
                                    <Template>
                                        @if (emp.ProfilePhoto?.Length > 0)
                                        {
                                            <img src="@GetImageSrc(emp.ProfilePhoto)" alt="Profile Photo" style="max-height:80px;" />
                                        }
                                        else
                                        {
                                            <span>No Photo</span>
                                        }
                                    </Template>
                                </FormItem>
                            </FormItems>
                        </TelerikForm>
                    </FormTemplate>
                <ButtonsTemplate>
                    @{
                        <GridCommandButton Command="Save">
                              <span>Update Item</span>
                         </GridCommandButton>

                        <GridCommandButton Command="Cancel">
                           
                                <span>Cancel Update</span>
                            
                        </GridCommandButton>

                        <GridCommandButton Command="">
                            @if (!context.IsNew)
                            {
                                <span>Print Profile</span>
                            }
                           
                        </GridCommandButton>
                    }
                </ButtonsTemplate>
            </GridPopupEditFormSettings>
        </GridSettings>
                         
        <GridColumns>

            <GridColumn Field="@nameof(Employee.Id)" Title="ID" Editable="false" />
            <GridColumn Field="@nameof(Employee.FirstName)" Title="Name" />
            <GridColumn Field="@nameof(Employee.LastName)" Title="Surname" />
            <GridColumn Field="@nameof(Employee.Email)" Title="Email" />
            <GridColumn Field="@nameof(Employee.PhoneNumber)" Title="Phone" />
            <GridColumn Field="@nameof(Employee.DepartmentId)" Title="Department ID" />
            <GridColumn Field="@nameof(Employee.JobTitleId)" Title="Job ID" />

            

            <GridCommandColumn Width="180px">

                <GridCommandButton Command="Edit">Edit</GridCommandButton>
                <GridCommandButton Command="Save" ShowInEdit="true">Save</GridCommandButton>

            </GridCommandColumn>
           
        </GridColumns>
    </TelerikGrid>
</TelerikRootComponent>
}

@code {
    // makes this list so telerik can read from list even though its one user
    private TelerikPopup? PopupRef { get; set; }
    private Employee editEmployee = new Employee();
    private UserAccount userCurr;
    private List<Employee> employeeCurr;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<Department> departmentDropDown;
    private IEnumerable<JobTitle> jobTitles;

    protected override async Task OnInitializedAsync()
    {
        jobTitles = DbContext.JobTitles.ToList();
        departmentDropDown = DbContext.Departments.ToList();
        employeeCurr = new List<Employee>();

        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;

        var authResult = await AuthorizationService.AuthorizeAsync(user, "Position");

        if (authResult.Succeeded)
        {
            employeeCurr = DbContext.Employees.ToList();
        }
        else
        {
            var connectedClaims = HttpContextAccessor.HttpContext.User.Claims.ToList();
            userCurr = DbContext.Users.Where(X => X.UserName == connectedClaims[0].Value).FirstOrDefault();
            employeeCurr.Add(DbContext.Employees.Where(X => X.Id == userCurr.EmployeeID).FirstOrDefault());

        }
    }
    // Built-in methods to read data to table
    private void readItems(GridReadEventArgs args)
    {
        var datasourceResults = employeeCurr.ToDataSourceResult(args.Request);
        args.Data = datasourceResults.Data;
        args.Total = datasourceResults.Total;
    }

    private void OnGridUpdate(GridCommandEventArgs args)
    {
        var userDb = DbContext.Employees.FirstOrDefault(x => x.Id == editEmployee.Id);
        if (userDb != null)
        {
            userDb.FirstName = editEmployee.FirstName;
            userDb.LastName = editEmployee.LastName;
            userDb.Email = editEmployee.Email;
            userDb.PhoneNumber = editEmployee.PhoneNumber;
            userDb.DepartmentId = editEmployee.DepartmentId;
            userDb.JobTitleId = editEmployee.JobTitleId;
            userDb.HireDate = editEmployee.HireDate;
            userDb.IsActive = editEmployee.IsActive;

            DbContext.SaveChanges();
        }
    }
    private void OnGridEdit(GridCommandEventArgs args)
    {
        var original = (Employee)args.Item;
        editEmployee = new Employee
            {
                Id = original.Id,
                FirstName = original.FirstName,
                LastName = original.LastName,
                Email = original.Email,
                PhoneNumber = original.PhoneNumber,
                DepartmentId = original.DepartmentId,
                JobTitleId = original.JobTitleId,
                HireDate = original.HireDate,
                IsActive = original.IsActive,
                ProfilePhoto = original.ProfilePhoto
            };
    }
    private void addUser()
    {
        navigation.NavigateTo("/add-user");
    }

    private string GetImageSrc(byte[] imageBytes)
    {
        var base64 = Convert.ToBase64String(imageBytes);
        return $"data:image/png;base64,{base64}";
    }
}
