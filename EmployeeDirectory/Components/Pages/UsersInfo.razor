@page "/users-info"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Telerik.DataSource.Extensions;
@using Telerik.DataSource
@using Microsoft.AspNetCore.Authorization
@using EmployeeDirectory.Models.Data
@using EmployeeDirectory.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject AppDbContext DbContext
@inject SignInServices SignInService

@rendermode InteractiveServer
@attribute [Authorize(Policy = "Position")]



<h3>Users</h3>

@if (DbContext.Users == null)
{
    <p>No users</p>
}
else
{
    <TelerikGrid TItem="UserAccount"
                 OnRead="@readItems"
                 Height="300px"
                 EditMode="@GridEditMode.Inline"
                 OnUpdate="@OnGridUpdate">
        <GridColumns>

            <GridColumn Field="@nameof(UserAccount.Id)" Title="ID" Editable="false" />
            <GridColumn Field="@nameof(UserAccount.UserName)" Title="User Name" />
            <GridColumn Field="@nameof(UserAccount.EmployeeID)" Title="Employee ID" />
            <GridColumn Field="@nameof(UserAccount.PermissionID)" Title="Permission ID" Editable="false"/>
            <GridCommandColumn Width="180px">
                <GridCommandButton Command="Edit">Edit</GridCommandButton>
                <GridCommandButton Command="Save" ShowInEdit="true">Save</GridCommandButton>
            </GridCommandColumn>
            @* <GridColumn Field="@DbContext.Departments.Where(X=> X.Id == userCurr[0].DepartmentId).FirstOrDefault().Name" Title="Department" /> *@
            @* <GridColumn Field="@DbContext.JobTitles.Where(X=> X.Id == userCurr[0].JobTitleId).FirstOrDefault().Title" Title="Job Title" /> *@
        </GridColumns>
    </TelerikGrid>
}

@code {

    [Inject]
    private NavigationManager Navigation { get; set; }


    private void readItems(GridReadEventArgs args)
    {
        var datasourceResults = DbContext.Users.ToDataSourceResult(args.Request);
        args.Data = datasourceResults.Data;
        args.Total = datasourceResults.Total;
        var item = HttpContextAccessor.HttpContext.User.Claims;

    }

    private async Task OnGridUpdate(GridCommandEventArgs args)
    {
        //builtin method of telerik gets updated items from grid
        var updatedItem = (UserAccount)args.Item;
        // update user account and claim identity
        var userDb = DbContext.Users.Where(X => X.Id == updatedItem.Id).FirstOrDefault();
        //update user

        try
        {
            if (userDb != null)
            {
                userDb.UserName = updatedItem.UserName;
                userDb.Password = updatedItem.Password;
                userDb.EmployeeID = updatedItem.EmployeeID;
            }
            DbContext.SaveChanges();
            // await SignInService.UserSignInAsync(userDb);
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);

            // var sstate = HttpContextAccessor.HttpContext.User.Identity;
        }
        catch (Exception e)
        {
            throw e;
        }
        var authstate = HttpContextAccessor.HttpContext.User.Identity;
    }

    
}
